type Props = {
  score: number;
  maxScore: number;
  restartGame: (wholeRestart?: boolean, shuffle?: boolean) => void;
  vocabularyPart: string | number;
};

export default function Results({
  score,
  maxScore,
  restartGame,
  vocabularyPart,
}: Props) {
  const result = (score / maxScore) * 100;
  if (result > 90) {
    return (
      <div className="flex flex-col items-center rounded-xl bg-green-200 p-4">
        <span>–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result.toFixed(2)}</span>
        <h2 className="text-lg font-semibold mb-4">
          –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –Ω–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –∏ –ª—É—á—à–µ üòí
        </h2>
        <button
          className="border rounded-lg py-2 px-12 mb-2 border-gray-300  hover:bg-green-400 hover:border-green-400 "
          onClick={() => restartGame(false, true)}
        >
          –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
        </button>
        {vocabularyPart === "random" && (
          <button
            className="border rounded-lg py-2 px-12 border-gray-300  hover:bg-green-400 hover:border-green-400 "
            onClick={() => restartGame(true)}
          >
            –û–±–Ω–æ–≤–∏—Ç—å —Å–ª–æ–≤–∞
          </button>
        )}
      </div>
    );
  } else {
    return (
      <div className="flex flex-col items-center rounded-xl bg-red-200 p-4 ">
        <span>–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result.toFixed(2)}</span>
        <h2 className="text-lg font-semibold mb-4">
          –ù–µ—É—á, –∫—É–¥–∞ —Ö—É–∂–µ —Ç–æ, –∂–º–∏ "–Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", –±—ã—Å—Ç—Ä–æ üò°
        </h2>
        <button
          className="border rounded-lg py-2 px-12 mb-2 grow basis-0 border-gray-400  hover:bg-red-400 hover:border-red-400 "
          onClick={() => restartGame(false, true)}
        >
          –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
        </button>
      </div>
    );
  }
}
